name: Auto-create Idea Issues from README

on:
  push:
    paths:
      - "README.md"
  workflow_dispatch:

permissions:
  contents: write  # Allow write access to repository contents

jobs:
  create-issues:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/catthehacker/ubuntu:act-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    
    - name: Set up GitHub CLI
      run: |
        apt update
        apt install -y curl gnupg
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
          > /etc/apt/sources.list.d/github-cli.list
        apt update
        apt install gh -y

    - name: Authenticate GitHub CLI
      run: gh auth setup-git
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Ideas and Create Issues
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract ideas starting with '### Idea' and create issues
        awk '
        BEGIN { RS="### Idea [^#]"; in_ideas=0 }
        /### Idea/ { in_ideas=1; title = substr($0, 9); body = ""; next }
        in_ideas==1 {
          if ($0 ~ /^### Idea/) {
            print "TITLE>>>" title
            print "BODY>>>" body
            title = substr($0, 9);
            body = ""
          } else {
            body = body $0 "\n"
          }
        }
        END {
          print "TITLE>>>" title
          print "BODY>>>" body
        }
        ' README.md > ideas.txt

        # Split extracted ideas into separate files
        csplit -z -f idea_ ideas.txt '/^TITLE>>>/' '{*}'
        
        # Create a file to store issue URLs for the README update
        > issue_urls.txt
        
        # Function to create issues in parallel
        create_issue() {
          f=$1
          title=$(grep '^TITLE>>>' "$f" | sed 's/^TITLE>>> //')
          body=$(sed -n '/^BODY>>>/,$p' "$f" | sed 's/^BODY>>> //')

          # Check if issue exists or create new one
          issue_url=""
          if ! issue_data=$(gh issue list --state all --limit 100 --json title,url | jq -r ".[] | select(.title == \"$title\") | .url"); then
            echo "Creating issue: $title"
            issue_data=$(gh issue create \
              --title "$title" \
              --body "### Idea \n\n$body\n\nVote by adding 👍 to this issue!" \
              --label "idea" \
              --json url | jq -r ".url") || exit 1
            echo "Created issue: $issue_data"
          else
            echo "Issue already exists: $title"
          fi
          
          # Store the issue URL with its title for README update
          echo "$title|$issue_data" >> issue_urls.txt
        }

        # Loop through idea_* files and create issues in parallel
        for f in idea_*; do
          create_issue "$f" &  # Run in the background
          sleep 1  # Sleep for 1 second to avoid hitting rate limit
        done

        # Wait for all background processes to finish
        wait
        
        # Update README.md with issue links for voting
        cp README.md README.md.bak
        awk -F'|' 'NR==FNR {issues[$1]=$2; next} 
        { 
          if ($0 ~ /^### Idea [^#]/) { 
            title = substr($0, 9)
            gsub(/^[ \t]+/, "", title)
            if (issues[title] != "") {
              print $0 " [Vote 👍](" issues[title] ")"
            } else {
              print $0
            }
          } else {
            print $0
          }
        }' issue_urls.txt README.md.bak > README.md
        
    - name: Commit README changes
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add README.md
        git diff --staged --quiet || git commit -m "Add voting links to ideas in README"
        
        # Authenticate using GITHUB_TOKEN for the push
        git remote set-url origin https://github.com/${{ github.repository }}.git
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main
